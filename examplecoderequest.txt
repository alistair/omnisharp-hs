let a = CodeActionRequest "using System.Net;\r\nusing System.Threading.Tasks;\r\nusing AutoMapper;\r\nusing blackdunes.chronicles.Data;\r\nusing Microsoft.AspNet.Builder;\r\nusing Microsoft.AspNet.Hosting;\r\nusing Microsoft.AspNet.Identity.EntityFramework;\r\nusing Microsoft.Data.Entity;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Logging;\r\nusing blackdunes.chronicles.Models;\r\nusing blackdunes.chronicles.Services;\r\nusing blackdunes.chronicles.ViewModels.Child;\r\nusing Microsoft.AspNet.Authentication.Cookies;\r\n\r\nnamespace blackdunes.chronicles\r\n{\r\n    public class Startup\r\n    {\r\n        public Startup(IHostingEnvironment env)\r\n        {\r\n            // Set up configuration sources.\r\n            var builder = new ConfigurationBuilder()\r\n                .AddJsonFile(\"appsettings.json\")\r\n                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true);\r\n\r\n            if (env.IsDevelopment())\r\n            {\r\n                // For more details on using the user secret store see http://go.microsoft.com/fwlink/?LinkID=532709\r\n                builder.AddUserSecrets();\r\n            }\r\n\r\n            builder.AddEnvironmentVariables();\r\n            Configuration = builder.Build();\r\n        }\r\n\r\n        public IConfigurationRoot Configuration { get; set; }\r\n\r\n        // This method gets called by the runtime. Use this method to add services to the container.\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n\r\n            // Add framework services.\r\n            AddSqlServer(services);\r\n\r\n            services.AddIdentity<ApplicationUser, IdentityRole>(config => {\r\n                config.User.RequireUniqueEmail = true;\r\n                config.Cookies.ApplicationCookie.Events = new CookieAuthenticationEvents\r\n                {\r\n                    OnRedirectToLogin = ctx => {\r\n                        if (ctx.Request.Path.StartsWithSegments(\"/api\") && ctx.Response.StatusCode == (int)HttpStatusCode.OK)\r\n                        {\r\n                            ctx.Response.StatusCode = (int)HttpStatusCode.Unauthorized;\r\n                        }\r\n                        else {\r\n                            ctx.Response.Redirect(ctx.RedirectUri);\r\n                        }\r\n\r\n                        return Task.FromResult(0);\r\n                    }\r\n                };\r\n\r\n            })\r\n            .AddEntityFrameworkStores<ApplicationDbContext>()\r\n            .AddDefaultTokenProviders();\r\n\r\n            services.AddMvc();\r\n\r\n            // Add application services.\r\n            services.AddTransient<IEmailSender, AuthMessageSender>();\r\n            services.AddTransient<ISmsSender, AuthMessageSender>();\r\n\r\n            //Add Seeders\r\n            //services.AddTransient<ContextSeedData>();\r\n            services.AddTransient<DataSeeders>();\r\n\r\n            services.AddScoped<IChronicleRepository, ChronicleRepository>();\r\n\r\n        }\r\n\r\n        public virtual void AddSqlServer(IServiceCollection services)\r\n        {\r\n            services.AddEntityFramework()\r\n                .AddSqlServer()\r\n                .AddDbContext<ApplicationDbContext>(options =>\r\n                    options.UseSqlServer(Configuration[\"Data:DefaultConnection:ConnectionString\"]));\r\n        }\r\n\r\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\r\n        public async void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory, DataSeeders dataSeeders)\r\n        {\r\n            loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\r\n            loggerFactory.AddDebug();\r\n\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseBrowserLink();\r\n                app.UseDeveloperExceptionPage();\r\n                app.UseDatabaseErrorPage();\r\n            }\r\n            else {\r\n                app.UseExceptionHandler(\"/Home/Error\");\r\n\r\n                // For more details on creating database during deployment see http://go.microsoft.com/fwlink/?LinkID=615859\r\n                try\r\n                {\r\n                    using (var serviceScope = app.ApplicationServices.GetRequiredService<IServiceScopeFactory>()\r\n                        .CreateScope())\r\n                    {\r\n                        serviceScope.ServiceProvider.GetService<ApplicationDbContext>()\r\n                             .Database.Migrate();\r\n                    }\r\n                }\r\n                catch { }\r\n            }\r\n\r\n            app.UseIISPlatformHandler(options => options.AuthenticationDescriptions.Clear());\r\n\r\n            app.UseStaticFiles();\r\n\r\n            Mapper.Initialize(config => {\r\n                config.CreateMap<Child, ChildViewModel>().ReverseMap();\r\n            });\r\n\r\n            app.UseIdentity();\r\n\r\n            // To configure external authentication please see http://go.microsoft.com/fwlink/?LinkID=532715\r\n\r\n            app.UseMvc(routes => {\r\n                routes.MapRoute(\r\n                    name: \"default\",\r\n                    template: \"{controller=Home}/{action=Index}/{id?}\");\r\n            });\r\n\r\n            AddSeeders(dataSeeders);\r\n            await dataSeeders.EnsureSeedData();\r\n\r\n        }\r\n\r\n        private void AddSeeders(DataSeeders dataSeeders)\r\n        {\r\n            dataSeeders.Seeders.Add(new DefaultDataSeeder());\r\n            AddCustomSeeders(dataSeeders);\r\n        }\r\n\r\n        public virtual void AddCustomSeeders(DataSeeders dataSeeders)\r\n        {\r\n        }\r\n\r\n        // Entry point for the application.\r\n        public static void Main(string[] args) => WebApplication.Run<Startup>(args);\r\n    }\r\n}" 42 "/home/alistair/Projects/blackdunes.chronicles/src/blackdunes.chronicles/Startup.cs" False 51
